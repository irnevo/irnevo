#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char data;
    struct Node* next;
};

void push(struct Node** top, char value) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    if (new_node == NULL) {
        printf("Stack overflow\n");
        return;
    }
    new_node->data = value;
    new_node->next = *top;
    *top = new_node;
}

char pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow\n");
        exit(1);
    }
    struct Node* temp = *top;
    char popped_value = temp->data;
    *top = (*top)->next;
    free(temp);
    return popped_value;
}

char peek(struct Node* top) {
    if (top != NULL)
        return top->data;
    return '\0';
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

int precedence(char ch) {
    if (ch == '+' || ch == '-')
        return 1;
    if (ch == '*' || ch == '/')
        return 2;
    return 0;
}

void infixToPostfix(char* infix, char* postfix) {
    struct Node* stack = NULL;
    int i = 0, k = 0;
    
    while (infix[i] != '\0') {
        if ((infix[i] >= '0' && infix[i] <= '9') || (infix[i] >= 'a' && infix[i] <= 'z') || (infix[i] >= 'A' && infix[i] <= 'Z')) {
            postfix[k++] = infix[i];
        } else if (infix[i] == '(') {
            push(&stack, infix[i]);
        } else if (infix[i] == ')') {
            while (stack != NULL && peek(stack) != '(') {
                postfix[k++] = pop(&stack);
            }
            pop(&stack);
        } else if (isOperator(infix[i])) {
            while (stack != NULL && precedence(peek(stack)) >= precedence(infix[i])) {
                postfix[k++] = pop(&stack);
            }
            push(&stack, infix[i]);
        }
        i++;
    }
    
    while (stack != NULL) {
        postfix[k++] = pop(&stack);
    }
    
    postfix[k] = '\0';
}

int main() {
    char infix[100], postfix[100];
    printf("Enter an infix expression: ");
    scanf("%s", infix);
    
    infixToPostfix(infix, postfix);
    
    printf("The equivalent postfix expression is: %s\n", postfix);
    
    return 0;
}
