#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>


typedef struct node {
    char data;
    struct node* next;
} Node;


Node* createNode(char data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}


int isEmpty(Node* top) {
    return top == NULL;
}


void push(Node** top, char data) {
    Node* newNode = createNode(data);
    if (*top)
        newNode->next = *top;
    *top = newNode;
}


char pop(Node** top) {
    Node* temp;
    char data;
    if (isEmpty(*top)) {
        printf("Stack is empty\n");
        return '\0';
    }
    temp = *top;
    data = temp->data;
    *top = (*top)->next;
    free(temp);
    return data;
}


int getPrecedence(char operator) {
    switch (operator) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return 0;
    }
}


void infixToPostfix(char* infix, char* postfix) {
    Node* top = NULL;
    int i, j = 0;
    for (i = 0; infix[i]; i++) {
        if (infix[i] == ' ') {
            continue;
        } else if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            push(&top, infix[i]);
        } else if (infix[i] == ')') {
            while (top->data != '(') {
                postfix[j++] = pop(&top);
            }
            pop(&top); // Remove the '('
        } else {
            while (!isEmpty(top) && getPrecedence(top->data) >= getPrecedence(infix[i])) {
                postfix[j++] = pop(&top);
            }
            push(&top, infix[i]);
        }
    }
    while (!isEmpty(top)) {
        postfix[j++] = pop(&top);
    }
    postfix[j] = '\0';
}

int main() {
    char infix[100], postfix[100];
    printf("Enter an infix expression: ");
    gets(infix);
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
