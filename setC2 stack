#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int value) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    if (new_node == NULL) {
        printf("Stack overflow\n");
        return;
    }
    new_node->data = value;
    new_node->next = *top;
    *top = new_node;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow\n");
        exit(1);
    }
    struct Node* temp = *top;
    int popped_value = temp->data;
    *top = (*top)->next;
    free(temp);
    return popped_value;
}

void copyStack(struct Node** stack1, struct Node** stack2) {
    struct Node* temp_stack = NULL;

    while (*stack1 != NULL) {
        push(&temp_stack, pop(stack1));
    }

    while (temp_stack != NULL) {
        int value = pop(&temp_stack);
        push(stack1, value);
        push(stack2, value);
    }
}

void display(struct Node* top) {
    while (top != NULL) {
        printf("%d -> ", top->data);
        top = top->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* stack1 = NULL;
    struct Node* stack2 = NULL;
    int n, value;

    printf("Enter the number of elements for stack 1: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        printf("Enter element %d for stack 1: ", i+1);
        scanf("%d", &value);
        push(&stack1, value);
    }

    copyStack(&stack1, &stack2);

    printf("Stack 1 after copying: ");
    display(stack1);

    printf("Stack 2 after copying: ");
    display(stack2);

    return 0;
}
