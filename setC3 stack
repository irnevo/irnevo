#include <stdio.h>
#include <stdlib.h>

// Define the structure for a stack node
typedef struct node {
    int data;
    struct node* next;
} Node;

// Function to create a new stack node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to check if the stack is empty
int isEmpty(Node* top) {
    return top == NULL;
}

// Function to push an element onto the stack
void push(Node** top, int data) {
    Node* newNode = createNode(data);
    if (*top)
        newNode->next = *top;
    *top = newNode;
}

// Function to pop an element from the stack
int pop(Node** top) {
    Node* temp;
    int data;
    if (isEmpty(*top)) {
        printf("Stack is empty\n");
        return -1;
    }
    temp = *top;
    data = temp->data;
    *top = (*top)->next;
    free(temp);
    return data;
}

// Function to check if two stacks are identical
int areStacksIdentical(Node* top1, Node* top2) {
    while (!isEmpty(top1) && !isEmpty(top2)) {
        if (pop(&top1) != pop(&top2))
            return 0;
    }
    return isEmpty(top1) && isEmpty(top2);
}

// Main function
int main() {
    Node* top1 = NULL;
    Node* top2 = NULL;

    // Push elements onto the first stack
    push(&top1, 1);
    push(&top1, 2);
    push(&top1, 3);

    // Push elements onto the second stack
    push(&top2, 1);
    push(&top2, 2);
    push(&top2, 3);

    if (areStacksIdentical(top1, top2))
        printf("The stacks are identical\n");
    else
        printf("The stacks are not identical\n");

    return 0;
}
