#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to insert an element at the end of the list
void insertAtEnd(struct Node** head, int data) {
    struct Node* new_node;
    struct Node* temp;

    new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
        return;
    }

    temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = new_node;
}

// Function to search for a number in the list
void searchNumber(struct Node* head, int key) {
    struct Node* temp;
    int position;

    temp = head;
    position = 1;

    while (temp != NULL) {
        if (temp->data == key) {
            printf("Number found at position %d\n", position);
            return;
        }
        temp = temp->next;
        position++;
    }
    printf("Number not Found\n");
}

// Function to swap the m-th and n-th nodes
void swapNodes(struct Node** head, int m, int n) {
    struct Node *prevM, *prevN, *nodeM, *nodeN, *temp;
    int i;

    if (m == n) return;

    prevM = NULL;
    prevN = NULL;
    nodeM = *head;
    nodeN = *head;

    for (i = 1; nodeM != NULL && i < m; i++) {
        prevM = nodeM;
        nodeM = nodeM->next;
    }

    for (i = 1; nodeN != NULL && i < n; i++) {
        prevN = nodeN;
        nodeN = nodeN->next;
    }

    if (nodeM == NULL || nodeN == NULL) {
        printf("Invalid positions for swapping\n");
        return;
    }

    if (prevM != NULL) prevM->next = nodeN;
    else *head = nodeN;

    if (prevN != NULL) prevN->next = nodeM;
    else *head = nodeM;

    temp = nodeN->next;
    nodeN->next = nodeM->next;
    nodeM->next = temp;
}

// Function to delete a node at a specific position
void deleteAtPosition(struct Node** head, int pos) {
    struct Node* temp;
    struct Node* next;
    int i;

    if (*head == NULL) return;

    temp = *head;

    if (pos == 1) {
        *head = temp->next;
        free(temp);
        return;
    }

    for (i = 1; temp != NULL && i < pos - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) return;

    next = temp->next->next;
    free(temp->next);
    temp->next = next;
}

// Function to display the list
void displayList(struct Node* head) {
    struct Node* temp;
    temp = head;
    
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head;
    int choice, value, m, n, pos;

    head = NULL;
    clrscr();  // Clear screen for Turbo C

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Swap m-th and n-th nodes\n");
        printf("4. Delete node at specific position\n");
        printf("5. Display List\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            printf("Enter value to insert: ");
            scanf("%d", &value);
            insertAtEnd(&head, value);
        } else if (choice == 2) {
            printf("Enter number to search: ");
            scanf("%d", &value);
            searchNumber(head, value);
        } else if (choice == 3) {
            printf("Enter positions m and n to swap: ");
            scanf("%d %d", &m, &n);
            swapNodes(&head, m, n);
        } else if (choice == 4) {
            printf("Enter position to delete: ");
            scanf("%d", &pos);
            deleteAtPosition(&head, pos);
        } else if (choice == 5) {
            displayList(head);
        } else if (choice == 6) {
            break;
        } else {
            printf("Invalid choice.\n");
        }
    }

    getch();  // Wait for key press in Turbo C
    return 0;
}

