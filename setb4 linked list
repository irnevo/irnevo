#include <stdio.h>
#include <conio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->prev = NULL;
    new_node->next = NULL;
    return new_node;
}

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(struct Node** head, int data) {
    struct Node* new_node = createNode(data);
    struct Node* temp = *head;

    if (*head == NULL) {
        *head = new_node;
        return;
    }

    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = new_node;
    new_node->prev = temp;
}

// Function to display nodes with odd values
void displayOddNodes(struct Node* head) {
    struct Node* temp = head;
    printf("Nodes with odd values: ");
    
    while (temp != NULL) {
        if (temp->data % 2 != 0) {
            printf("%d -> ", temp->data);
        }
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to display the complete list (for debugging purposes)
void displayList(struct Node* head) {
    struct Node* temp = head;
    printf("Complete List: ");
    
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    int n, value, i;

    clrscr();  // Clear the screen for Turbo C

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &value);
        insertAtEnd(&head, value);
    }

    displayList(head);         // Display the entire list
    displayOddNodes(head);     // Display only the nodes with odd values

    getch();  // Wait for key press in Turbo C
    return 0;
}
